"""CLI stub for running an end-to-end demo of the pipeline."""
from __future__ import annotations

import argparse
import sys
from pathlib import Path

PROJECT_ROOT = Path(__file__).resolve().parents[1]
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

from pipelines import run_demo_pipeline


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Run the demo pipeline over a single document.")
    parser.add_argument("--in", dest="input_path", type=Path, required=True, help="Input document (PDF or text).")
    parser.add_argument("--out", dest="output_dir", type=Path, required=True, help="Output directory for artifacts.")
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    document = run_demo_pipeline(args.input_path)

    output_dir = args.output_dir
    output_dir.mkdir(parents=True, exist_ok=True)

    json_path = output_dir / f"{document.document_id}.json"
    md_path = output_dir / f"{document.document_id}.md"

    json_path.write_text(document.model_dump_json(indent=2), encoding="utf-8")
    md_path.write_text(
        "\n".join(
            [
                f"# Report for {document.document_id}",
                "",
                "This is a placeholder markdown report generated by the demo pipeline.",
                "",
                "## Summary",
                "- Pending implementation.",
            ]
        ),
        encoding="utf-8",
    )

    print(f"Wrote demo artifacts: {json_path} and {md_path}")


if __name__ == "__main__":  # pragma: no cover - CLI entry point
    main()
